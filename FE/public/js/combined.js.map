{"version":3,"sources":["node_modules/browser-pack/_prelude.js","serverConfig.js","src/js/config/httpConfig.js","src/js/config/routes.js","src/js/shared/accountService.js","src/js/shared/authInterceptor.js","src/js/shared/authStateService.js","src/js/shared/requestBuffer.js","src/js/shared/restService.js","src/views/Account/accountController.js","src/views/Authorized/AuthorizedController.js","src/views/Authorized/AuthorizedService.js","src/views/DataAccess/dataAccessControllers.js","src/views/DataAccess/dataAccessServices.js","src/views/PageSelector/pageSelectorController.js","src/views/app.js","src/views/index/indexController.js","src/views/index/indexServices.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","frontendConfig","protocol","domain","port","baseUrl","backendConfig","httpConfig","$httpProvider","defaults","useXDomain","interceptors","push","routes","$stateProvider","$urlRouterProvider","$locationProvider","otherwise","html5Mode","state","url","templateUrl","_serverConfig","_restService","UserViewModel","AccountService","$http","$q","authStateService","requestBuffer","_classCallCheck","this","refreshPromise","currentUser","hasRefreshed","username","password","_this","deferred","defer","method","data","grant_type","headers","Content-Type","transformRequest","obj","str","p","encodeURIComponent","join","then","response","setToken","userName","access_token","refresh_token","resolve","catch","console","log","reject","promise","hasToken","deleteToken","Email","Password","ConfirmPassword","rolename","RoleName","params","_this2","token","getToken","refreshToken","tokenUrl","post","retryAll","rejectAll","logout","id","_this3","_possibleConstructorReturn","Object","getPrototypeOf","roles","apiModel","Id","UserName","authInterceptor","$injector","auth","isApiRequest","config","indexOf","request","authentication","Authorization","accessToken","responseError","rejection","status","authService","get","append","Token","AuthStateService","$cookies","authCookieName","user","stringifiedToken","JSON","stringify","put","jsonEncodedToken","parse","requestBufferServiceFactory","buffer","_append","_retryAll","configUpdater","updater","_cfg","_retryHttpRequest","_rejectAll","reason","RestServiceBase","endpoint","apiUrl","viewModel","arguments","undefined","responseIsEnumerable","prototype","toString","enumerableData","convertedData","map","toViewModel","error","toApiModel","converted","delete","ApiModelBase","ViewModelBase","LoginModel","AccountController","accountService","registerModel","RegisterModel","loginModel","lastResponse","isLoggedIn","roleName","login","getRoles","addRole","_this4","removeRole","_this5","register","confirmPassword","_this6","AuthorizedController","usersService","users","text","adminFunction","_accountService","UsersService","fromApiModel","Text","DataAccessController","valuesService","values","value","filter","v","ValueViewModel","ValuesService","name","Name","Page","route","description","PageSelectorController","$state","selectedPage","pages","go","_routes","_httpConfig","_accountController","_AuthorizedController","_AuthorizedService","_dataAccessControllers","_dataAccessServices","_indexController","_indexServices","_pageSelectorController","_requestBuffer","_authStateService","_authInterceptor","angular","controller","service","PeopleController","PeopleService","factory","PeopleSortOption","display","property","reverse","peopleService","people","getPeople","defaultSortOption","sortOptions","sortBy","Person","age"],"mappings":"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","file":"combined.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","exports.frontendConfig = {\r\n    protocol: \"http\",\r\n    domain: \"localhost.com\",\r\n    port: 8000,\r\n    baseUrl: () => exports.frontendConfig.protocol + \"://\" + exports.frontendConfig.domain + \":\" + exports.frontendConfig.port\r\n};\r\n\r\nexports.backendConfig = {\r\n    protocol: \"http\",\r\n    domain: \"localhost\",\r\n    port: 12345,\r\n    baseUrl: () => exports.backendConfig.protocol + \"://\" + exports.backendConfig.domain + \":\" + exports.backendConfig.port\r\n};\r\n\r\n//this will be shared across node and ng, so module won't exist on ng\r\nif (typeof module !== \"undefined\") {\r\n    module.exports = {\r\n        frontendConfig: exports.frontendConfig,\r\n        backendConfig: exports.backendConfig\r\n    };\r\n}","export function httpConfig($httpProvider) {\r\n    //Enable cross domain calls\r\n    $httpProvider.defaults.useXDomain = true;\r\n    $httpProvider.interceptors.push('authInterceptor');\r\n}","export function routes($stateProvider, $urlRouterProvider, $locationProvider) {\r\n    $urlRouterProvider.otherwise(\"/PageSelector\");\r\n    $locationProvider.html5Mode();\r\n    $stateProvider\r\n        .state(\"root\", {\r\n            url: \"/\",\r\n            templateUrl: \"/root.html\"\r\n        })\r\n        .state(\"pageSelector\", {\r\n            url: \"/PageSelector\",\r\n            templateUrl: \"/PageSelector/PageSelector.html\"\r\n        })\r\n        .state(\"pageSelector.index\", {\r\n            url: \"/Index\",\r\n            templateUrl: \"/index/index.html\"\r\n        })\r\n        .state(\"pageSelector.dataAccess\", {\r\n            url: \"/DataAccess\",\r\n            templateUrl: \"/DataAccess/DataAccess.html\"\r\n        })\r\n        .state(\"pageSelector.account\", {\r\n            url: \"/Account\",\r\n            templateUrl: \"/Account/Account.html\"\r\n        })\r\n        .state(\"pageSelector.authorized\", {\r\n            url: \"/Authorized\",\r\n            templateUrl: \"/Authorized/Authorized.html\"\r\n        });\r\n}","import {backendConfig} from \"../../../serverConfig\";\r\nimport {ViewModelBase} from \"../shared/restService\";\r\n\r\nexport class AccountService {\r\n    constructor($http, $q, authStateService, requestBuffer) {\r\n        this.$http = $http;\r\n        this.$q = $q;\r\n        this.authStateService = authStateService;\r\n        this.requestBuffer = requestBuffer;\r\n        this.refreshPromise = null;\r\n        this.currentUser = null;\r\n        //prevents infinite recursion when receiving 401 due to lack of role/authorization, rather than lack of authentication\r\n        this.hasRefreshed = false;\r\n    }\r\n\r\n    login(username, password) {\r\n        var deferred = this.$q.defer();\r\n        var request = this.$http({\r\n            url: backendConfig.baseUrl() + \"/token\",\r\n            method: \"POST\",\r\n            data: { grant_type: 'password', username: username, password: password },\r\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n            transformRequest: function(obj) {\r\n                var str = [];\r\n                for(var p in obj)\r\n                    str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\r\n                return str.join(\"&\");\r\n            }\r\n        }).then(response => {\r\n            this.hasRefreshed = false;\r\n            this.authStateService.setToken(response.data.userName, response.data.access_token, response.data.refresh_token);\r\n            this.currentUser = new UserViewModel(-1, response.data.userName);\r\n            deferred.resolve();\r\n        }).catch(response => {\r\n            console.log(\"login error\");\r\n            console.log(response);\r\n            deferred.reject(response);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    logout() {\r\n        if (!this.authStateService.hasToken()) return;\r\n        this.authStateService.deleteToken();\r\n    }\r\n\r\n    isLoggedIn() {\r\n        return !!this.authStateService.hasToken();\r\n    }\r\n\r\n    register(username, password) {\r\n        var deferred = this.$q.defer();\r\n        var request = this.$http({\r\n            url: backendConfig.baseUrl() + \"/api/\" + \"account/register\",\r\n            method: \"POST\",\r\n            data: { Email: username, Password: password, ConfirmPassword: password }\r\n        }).then(response => {\r\n            deferred.resolve();\r\n        }).catch(response => {\r\n            console.log(\"register error\");\r\n            console.log(response);\r\n            deferred.reject(response);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    addRole(username, rolename) {\r\n        var deferred = this.$q.defer();\r\n        var request = this.$http({\r\n            url: backendConfig.baseUrl() + \"/api/\" + \"account/addRole\",\r\n            method: \"POST\",\r\n            data: { Email: username, RoleName: rolename }\r\n        }).then(response => {\r\n            deferred.resolve();\r\n        }).catch(response => {\r\n            console.log(\"add role error\");\r\n            console.log(response);\r\n            deferred.reject(response);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    removeRole(username, rolename) {\r\n        var deferred = this.$q.defer();\r\n        var request = this.$http({\r\n            url: backendConfig.baseUrl() + \"/api/\" + \"account/removeRole\",\r\n            method: \"POST\",\r\n            data: { Email: username, RoleName: rolename }\r\n        }).then(response => {\r\n            deferred.resolve();\r\n        }).catch(response => {\r\n            console.log(\"remove role error\");\r\n            console.log(response);\r\n            deferred.reject(response);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    getRoles(username) {\r\n        var deferred = this.$q.defer();\r\n        var request = this.$http({\r\n            url: backendConfig.baseUrl() + \"/api/\" + \"account/getRoles\",\r\n            method: \"GET\",\r\n            params: { Email: username }\r\n        }).then(response => {\r\n            deferred.resolve(response.data);\r\n        }).catch(response => {\r\n            console.log(\"get roles error\");\r\n            console.log(response);\r\n            deferred.reject(response);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    refreshToken() {\r\n        if (this.refreshPromise === null) {\r\n            var token = this.authStateService.getToken();\r\n            if (!this.hasRefreshed && token && token.refreshToken) {\r\n                var data = \"grant_type=refresh_token&refresh_token=\" + token.refreshToken;\r\n                var tokenUrl = backendConfig.baseUrl() + '/token';\r\n                var headers = { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } };\r\n                this.refreshPromise = this.$http.post(tokenUrl, data, headers)\r\n                    .then(response => {\r\n                        this.hasRefreshed = true;\r\n                        this.authStateService.setToken(response.data.userName, response.data.access_token, response.data.refresh_token);\r\n                        this.refreshPromise = null;\r\n                        this.requestBuffer.retryAll();\r\n                    })\r\n                    .catch(response => {\r\n                        this.refreshPromise = null;\r\n                        this.requestBuffer.rejectAll(\"Token refresh failed.\");\r\n                        this.logout();\r\n                    });\r\n\r\n            } else {\r\n                this.requestBuffer.rejectAll(\"refresh_token missing\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class UserViewModel extends ViewModelBase {\r\n    constructor(id, userName) {\r\n        super(id);\r\n        this.userName = userName;\r\n        this.roles = [];\r\n    }\r\n\r\n    static fromApiModel(apiModel){\r\n        return new UserViewModel(apiModel.Id, apiModel.UserName);\r\n    }\r\n}","import {backendConfig} from \"../../../serverConfig\"\r\n\r\nexport function authInterceptor($injector, $q, authStateService, requestBuffer) {\r\n    var auth = {};\r\n\r\n    auth.isApiRequest = function (config) {\r\n        return config.url.indexOf(\"/api/\") !== -1;\r\n    };\r\n\r\n    auth.request = function (config) {\r\n        if (auth.isApiRequest(config)) {\r\n            config.headers = config.headers || {};\r\n            if (authStateService.hasToken()) {\r\n                var authentication = authStateService.getToken();\r\n                config.headers.Authorization = 'Bearer ' + authentication.accessToken;\r\n            }\r\n            else {\r\n                console.log(\"Failed to add authorisation to request\");\r\n                console.log(config);\r\n            }\r\n        }\r\n        return config\r\n    };\r\n\r\n    auth.responseError = function (rejection) {\r\n        var deferred = $q.defer();\r\n\r\n        if (!auth.hasRefreshed && rejection.status === 401 && auth.isApiRequest(rejection.config)) {\r\n            var authService = $injector.get('accountService');\r\n            requestBuffer.append(rejection.config, deferred);\r\n            authService.refreshToken();\r\n        } else {\r\n            deferred.reject(rejection);\r\n        }\r\n        return deferred.promise;\r\n    };\r\n    return auth;\r\n}","import {frontendConfig} from \"../../../serverConfig\";\r\n\r\nexport class AuthStateService {\r\n    constructor($cookies) {\r\n        this.$cookies = $cookies;\r\n        this.authCookieName = \"token\";\r\n    }\r\n\r\n    setToken(user, accessToken, refreshToken) {\r\n        var token = new Token(user, accessToken, refreshToken);\r\n        var stringifiedToken = JSON.stringify(token);\r\n        this.$cookies.put(this.authCookieName, stringifiedToken, { domain: frontendConfig.domain });\r\n    }\r\n\r\n    getToken() {\r\n        var jsonEncodedToken = this.$cookies.get(this.authCookieName);\r\n        if (!jsonEncodedToken) return null;\r\n        var token = JSON.parse(jsonEncodedToken);\r\n        return token;\r\n    }\r\n\r\n    hasToken() {\r\n        return !!this.getToken();\r\n    }\r\n\r\n    deleteToken() {\r\n        if (!this.hasToken()) return;\r\n        this.$cookies.put(this.authCookieName, null, { domain: frontendConfig.domain });\r\n    }\r\n}\r\n\r\nclass Token {\r\n    constructor(userName, accessToken, refreshToken) {\r\n        this.userName = userName;\r\n        this.accessToken = accessToken;\r\n        this.refreshToken = refreshToken;\r\n    }\r\n}","export function requestBuffer($injector) {\r\n    var requestBufferServiceFactory = {};\r\n\r\n    var buffer = [];\r\n\r\n    var _append = function(config, deferred) {\r\n        /*console.log(\"_append function triggered\");*/\r\n        return buffer.push({\r\n            config: config,\r\n            deferred: deferred\r\n        });\r\n    };\r\n\r\n    var _retryAll = function(configUpdater) {\r\n        /* console.log(\"_retryAll function triggered\");*/\r\n        var updater = configUpdater || function(config) { return config; };\r\n        for (var i = 0; i < buffer.length; ++i) {\r\n            var _cfg = updater(buffer[i].config);\r\n            if (_cfg !== false)\r\n                _retryHttpRequest(_cfg, buffer[i].deferred);\r\n        }\r\n        buffer = [];\r\n    };\r\n\r\n    var _rejectAll = function(reason) {\r\n        /*console.log(\"_rejectAll function triggered\");*/\r\n        for (var i = 0; i < buffer.length; ++i) {\r\n            buffer[i].deferred.reject(reason || \"\");\r\n        }\r\n        buffer = [];\r\n    };\r\n\r\n    var _retryHttpRequest = function(config, deferred) {\r\n        /*console.log(\"_retryHttpRequest function triggered\");*/\r\n        var $http = $injector.get('$http');\r\n        $http(config).then(function(response) {\r\n            deferred.resolve(response);\r\n        }, function(response) {\r\n            deferred.reject(response);\r\n        });\r\n    };\r\n\r\n    requestBufferServiceFactory.append = _append;\r\n    requestBufferServiceFactory.retryAll = _retryAll;\r\n    requestBufferServiceFactory.rejectAll = _rejectAll;\r\n\r\n    return requestBufferServiceFactory;\r\n}","import {backendConfig} from \"../../../serverConfig\";\r\n\r\nexport class RestServiceBase {\r\n    constructor($http, $q, endpoint) {\r\n        this.$http = $http;\r\n        this.$q = $q;\r\n        this.apiUrl = backendConfig.baseUrl() + \"/api/\" + endpoint;\r\n    }\r\n\r\n    /**\r\n     * Converts the parameter api model to a {ViewModelBase}\r\n     * Must be overridden in derived classes\r\n     * @param {ApiModelBase} apiModel\r\n     */\r\n    toViewModel(apiModel) {\r\n        throw new Error(\"Abstract\");\r\n    };\r\n\r\n    /**\r\n     * Converts the parameter api model to a {ViewModelBase}\r\n     * Must be overridden in derived classes\r\n     * @param {ViewModelBase} viewModel\r\n     */\r\n    toApiModel(viewModel) {\r\n        throw new Error(\"Abstract\");\r\n    };\r\n\r\n    /**\r\n     * Issues a GET request to the API, optionally taking a numeric id for a specific item\r\n     * Returns an array of elements, containing all items if no id is passed or just the item with\r\n     * the matching id if an id is passed\r\n     * @param {number=} id\r\n     * @returns {(Promise.<Array.<ViewModelBase>>)}\r\n     */\r\n    get(id = null) {\r\n        var deferred = this.$q.defer();\r\n        var params = id ? {id: id} : {};\r\n        this.$http.get(this.apiUrl, {params: params})\r\n            .then((response) => {\r\n                var responseIsEnumerable = Object.prototype.toString.call(response.data) === \"[object Array]\";\r\n                var enumerableData = responseIsEnumerable ? response.data : [response.data];\r\n                var convertedData = enumerableData.map(this.toViewModel);\r\n                deferred.resolve(convertedData);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"data service error\");\r\n                console.log(error);\r\n                deferred.reject(error);\r\n            });\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Issues a POST request to the API for the parameter view model\r\n     * This should cause the server to add the parameter view model to its list of entities\r\n     * @param {ViewModelBase} viewModel\r\n     * @returns {(Promise.<ViewModelBase>)}\r\n     */\r\n    post(viewModel) {\r\n        var deferred = this.$q.defer();\r\n        var apiModel = this.toApiModel(viewModel);\r\n        this.$http.post(this.apiUrl, {data: apiModel})\r\n            .then((response) => {\r\n                var converted = this.toViewModel(response.data);\r\n                deferred.resolve(converted);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"data service error\");\r\n                console.log(error);\r\n                deferred.reject(error);\r\n            });\r\n        return deferred.promise;\r\n    }\r\n\r\n    /**\r\n     * Issues a PUT request to the API with the id of the parameter view model, passing the view model\r\n     * This should cause the server to update the value of the entity with a matching id to the values present\r\n     * in the parameter view model\r\n     * @param {ViewModelBase} viewModel\r\n     * @returns {(Promise.<ViewModelBase>)}\r\n     */\r\n    put(viewModel){\r\n        var deferred = this.$q.defer();\r\n        var apiModel = this.toApiModel(viewModel);\r\n        this.$http.put(this.apiUrl, {params: {id: apiModel.id}, data: apiModel})\r\n            .then((response) => {\r\n                var converted = this.toViewModel(response.data);\r\n                deferred.resolve(converted);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"data service error\");\r\n                console.log(error);\r\n                deferred.reject(error);\r\n            });\r\n        return deferred.promise;\r\n    }\r\n\r\n    //this is a keyword in js so perhaps best avoided, but given that Google's $http object is using it, I will too\r\n    /**\r\n     * Issues a DELETE request to the API with the id of the parameter view model\r\n     * This should cause the server to delete the entity with a matching id\r\n     * @param {ViewModelBase} viewModel\r\n     * @returns {Promise}\r\n     */\r\n    delete(viewModel){\r\n        var deferred = this.$q.defer();\r\n        var apiModel = this.toApiModel(viewModel);\r\n        this.$http.delete(this.apiUrl, {params: {id: apiModel.id}})\r\n            .then((response) => {\r\n                deferred.resolve();\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"data service error\");\r\n                console.log(error);\r\n                deferred.reject(error);\r\n            });\r\n        return deferred.promise;\r\n    }\r\n}\r\n\r\nexport class ApiModelBase {\r\n    constructor(id) {\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nexport class ViewModelBase {\r\n    constructor(id) {\r\n        this.id = id;\r\n    }\r\n}","export class AccountController {\r\n    constructor(accountService) {\r\n        this.accountService = accountService;\r\n        this.registerModel = new RegisterModel();\r\n        this.loginModel = new LoginModel();\r\n        this.lastResponse = null;\r\n        this.isLoggedIn = this.accountService.isLoggedIn();\r\n        this.currentUser = accountService.currentUser;\r\n        this.roleName = \"\";\r\n    }\r\n\r\n    login(loginModel) {\r\n        this.accountService.login(loginModel.userName, loginModel.password)\r\n            .then(response => {\r\n                this.lastResponse = \"login successful\";\r\n                this.isLoggedIn = this.accountService.isLoggedIn();\r\n                this.currentUser = this.accountService.currentUser;\r\n            })\r\n            .catch(response => {\r\n                this.lastResponse = response;\r\n            })\r\n    }\r\n\r\n    getRoles() {\r\n        if (!this.currentUser) return;\r\n        this.accountService.getRoles(this.currentUser.userName)\r\n            .then(roles => {\r\n                this.lastResponse = \"get roles successful\";\r\n                this.currentUser.roles = roles;\r\n            })\r\n            .catch(response => {\r\n                this.lastResponse = response;\r\n            });\r\n    }\r\n\r\n    addRole(roleName) {\r\n        if (!this.currentUser) return;\r\n        this.accountService.addRole(this.currentUser.userName, roleName)\r\n            .then(roles => {\r\n                this.lastResponse = \"add role successful\";\r\n            })\r\n            .catch(response => {\r\n                this.lastResponse = response;\r\n            });\r\n    }\r\n\r\n    removeRole(roleName) {\r\n        if (!this.currentUser) return;\r\n        this.accountService.removeRole(this.currentUser.userName, roleName)\r\n            .then(roles => {\r\n                this.lastResponse = \"remove role successful\";\r\n            })\r\n            .catch(response => {\r\n                this.lastResponse = response;\r\n            });\r\n    }\r\n\r\n    logout(){\r\n        this.accountService.logout();\r\n        this.isLoggedIn = this.accountService.isLoggedIn();\r\n    }\r\n\r\n    register(registerModel) {\r\n        this.accountService.register(registerModel.userName, registerModel.password, registerModel.confirmPassword)\r\n            .then(response => {\r\n                this.lastResponse = \"registration successful\";\r\n            })\r\n            .catch(response => {\r\n                this.lastResponse = response;\r\n            })\r\n    }\r\n}\r\n\r\nclass LoginModel {\r\n    constructor() {\r\n        this.userName = \"\";\r\n        this.password = \"\";\r\n    }\r\n}\r\n\r\nclass RegisterModel extends LoginModel {\r\n    constructor() {\r\n        super();\r\n        this.confirmPassword = \"\";\r\n    }\r\n}","export class AuthorizedController {\r\n    constructor(usersService) {\r\n        this.usersService = usersService;\r\n        this.users = [];\r\n        this.text = null;\r\n        this.lastResponse = null;\r\n    }\r\n\r\n    getUsers() {\r\n        this.usersService.get()\r\n            .then(users => {\r\n                this.users = users;\r\n                this.lastResponse = \"got users\";\r\n            })\r\n            .catch(response => {\r\n                this.lastResponse = response;\r\n            });\r\n    }\r\n\r\n    adminFunction(text) {\r\n        this.usersService.adminFunction(text)\r\n            .then(response => {\r\n                this.lastResponse = response;\r\n            })\r\n            .catch(response => {\r\n                this.lastResponse = response;\r\n            });\r\n    }\r\n}","import {RestServiceBase, ViewModelBase, ApiModelBase} from \"../../js/shared/restService\";\r\nimport {UserViewModel} from \"../../js/shared/accountService\";\r\n\r\nexport class UsersService extends RestServiceBase {\r\n    constructor($http, $q) {\r\n        super($http, $q, \"Users\");\r\n    }\r\n\r\n    toViewModel(apiModel) {\r\n        return UserViewModel.fromApiModel(apiModel);\r\n    };\r\n\r\n    toApiModel(viewModel) {\r\n        return viewModel\r\n    };\r\n\r\n    adminFunction(text) {\r\n        var deferred = this.$q.defer();\r\n        this.$http.post(this.apiUrl + \"/AdminFunction\", {Text: text})\r\n            .then((response) => {\r\n                deferred.resolve(response.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"data service error\");\r\n                console.log(error);\r\n                deferred.reject(error);\r\n            });\r\n        return deferred.promise;\r\n    }\r\n}\r\n\r\n","export class DataAccessController {\r\n    constructor(valuesService) {\r\n        this.valuesService = valuesService;\r\n        this.values = [];\r\n        this.error = null;\r\n        this.method = \"GET\";\r\n        this.id = null;\r\n        this.value = null;\r\n    }\r\n\r\n    init() {\r\n        //here is where you'd initialize the controller if initialization had to occur\r\n    }\r\n\r\n    get(id = null) {\r\n        this.valuesService.get(id)\r\n            .then(values => this.values = values)\r\n            .catch(error => this.error = error);\r\n    }\r\n\r\n    post(viewModel) {\r\n        this.valuesService.post(viewModel)\r\n            .then(value => this.values.push(value))\r\n            .catch(error => this.error = error);\r\n    }\r\n\r\n    put(viewModel) {\r\n        this.valuesService.put(viewModel)\r\n            .catch(error => this.error = error);\r\n    }\r\n\r\n    delete(viewModel) {\r\n        this.valuesService.post(viewModel)\r\n            .then(value => this.values = this.values.filter(v => v.id !== viewModel.id))\r\n            .catch(error => this.error = error);\r\n    }\r\n}","import {RestServiceBase, ViewModelBase, ApiModelBase} from \"../../js/shared/restService\";\r\n\r\nexport class ValuesService extends RestServiceBase {\r\n    constructor($http, $q) {\r\n        super($http, $q, \"Values\");\r\n    }\r\n\r\n    toViewModel(apiModel) {\r\n        return ValueViewModel.fromApiModel(apiModel);\r\n    };\r\n\r\n    toApiModel(viewModel) {\r\n        return viewModel\r\n    };\r\n}\r\n\r\nclass ValueViewModel extends ViewModelBase {\r\n    constructor(id, name){\r\n        super(id);\r\n        this.name = name;\r\n    }\r\n\r\n    static fromApiModel(apiModel) {\r\n        return new ValueViewModel(apiModel.Id, apiModel.Name);\r\n    }\r\n}","class Page{\r\n    constructor(name, route, description){\r\n        this.name = name;\r\n        this.route = route;\r\n        this.description = description;\r\n    }\r\n}\r\n\r\nexport class PageSelectorController {\r\n    constructor($state) {\r\n        this.$state = $state;\r\n        this.selectedPage = null;\r\n        this.pages = [\r\n            new Page(\"Index\", \"pageSelector.index\", \"Shows the usage of ng-options and filtering\"),\r\n            new Page(\"Data Access\", \"pageSelector.dataAccess\", \"Shows the usage of a base REST service with babel\"),\r\n            new Page(\"Account\", \"pageSelector.account\", \"Logs into or registers user accounts\"),\r\n            new Page(\"Authorized\", \"pageSelector.authorized\", \"Performs a sample action which requires authorization and authentication\")\r\n        ];\r\n    }\r\n\r\n    go(selectedPage) {\r\n        this.$state.go(selectedPage.route);\r\n    }\r\n}","import {routes} from \"../js/config/routes\";\r\nimport {httpConfig} from \"../js/config/httpConfig\";\r\nimport {AccountController} from \"./Account/accountController\";\r\nimport {AuthorizedController} from \"./Authorized/AuthorizedController\";\r\nimport {UsersService} from \"./Authorized/AuthorizedService\";\r\nimport {DataAccessController} from \"./DataAccess/dataAccessControllers\";\r\nimport {ValuesService} from \"./DataAccess/dataAccessServices\";\r\nimport {PeopleController} from \"./index/indexController\";\r\nimport {PeopleService} from \"./index/indexServices\";\r\nimport {PageSelectorController} from \"./PageSelector/pageSelectorController\";\r\nimport {requestBuffer} from \"../js/shared/requestBuffer\";\r\nimport {AuthStateService} from \"../js/shared/authStateService\";\r\nimport {authInterceptor} from \"../js/shared/authInterceptor\";\r\nimport {AccountService} from \"../js/shared/accountService\";\r\n\r\nangular.module(\"playground\",\r\n    [\r\n        \"ui.router\",\r\n        \"ngCookies\"\r\n    ])\r\n    //config\r\n    .config([\"$stateProvider\", \"$urlRouterProvider\", \"$locationProvider\", routes])\r\n    .config(httpConfig)\r\n    //account\r\n    .controller(\"accountController\", [\"accountService\", AccountController])\r\n    //authorized\r\n    .controller(\"authorizedController\", [\"usersService\", AuthorizedController])\r\n    .service(\"usersService\", [\"$http\", \"$q\", UsersService])\r\n    //data access\r\n    .controller(\"dataAccessController\", [\"ValuesService\", DataAccessController])\r\n    .service(\"ValuesService\", [\"$http\", \"$q\", ValuesService])\r\n    //index\r\n    .controller(\"peopleController\", [\"peopleService\", PeopleController])\r\n    .service(\"peopleService\", [PeopleService])\r\n    //page selector\r\n    .controller(\"pageSelectorController\", [\"$state\", \"accountService\", PageSelectorController])\r\n    //shared\r\n    .factory('requestBuffer', ['$injector', requestBuffer])\r\n    .service(\"authStateService\", [\"$cookies\", AuthStateService])\r\n    .factory(\"authInterceptor\", [\"$injector\", \"$q\", \"authStateService\", \"requestBuffer\", authInterceptor])\r\n    .service(\"accountService\", [\"$http\", \"$q\", \"authStateService\", \"requestBuffer\", AccountService]);","class PeopleSortOption {\r\n    constructor(display, property, reverse) {\r\n        this.display = display;\r\n        this.property = property;\r\n        this.reverse = reverse;\r\n    }\r\n}\r\n\r\nexport class PeopleController {\r\n    constructor(peopleService) {\r\n        this.peopleService = peopleService;\r\n        this.people = this.peopleService.getPeople();\r\n        var defaultSortOption = new PeopleSortOption(\"alphabetical\", \"name\", false);\r\n        this.sortOptions = [defaultSortOption, new PeopleSortOption(\"oldest\", \"age\", true)];\r\n        this.sortBy = defaultSortOption;\r\n    }\r\n}","class Person {\r\n    constructor(name, age) {\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\nexport class PeopleService {\r\n    constructor() {\r\n        this.people = [new Person(\"Micky\", 26), new Person(\"Paula\", 57), new Person (\"Jimmy\", 23)];\r\n    }\r\n\r\n    getPeople() {\r\n        return this.people;\r\n    }\r\n\r\n    setPeople(people) {\r\n        this.people = people;\r\n    }\r\n}"],"sourceRoot":"/source/"}