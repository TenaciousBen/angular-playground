{"version":3,"sources":["node_modules/browser-pack/_prelude.js","serverConfig.js","src/js/config/httpConfig.js","src/js/config/routes.js","src/js/shared/accountService.js","src/js/shared/authInterceptor.js","src/js/shared/authStateService.js","src/js/shared/restService.js","src/views/Account/accountController.js","src/views/Authorized/AuthorizedController.js","src/views/Authorized/AuthorizedService.js","src/views/DataAccess/dataAccessControllers.js","src/views/DataAccess/dataAccessServices.js","src/views/PageSelector/pageSelectorController.js","src/views/app.js","src/views/index/indexController.js","src/views/index/indexServices.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","frontendConfig","protocol","domain","port","baseUrl","backendConfig","httpConfig","$httpProvider","defaults","useXDomain","interceptors","push","routes","$stateProvider","$urlRouterProvider","$locationProvider","otherwise","html5Mode","state","url","templateUrl","_serverConfig","_restService","UserViewModel","AccountService","$http","$q","authStateService","_classCallCheck","this","refreshPromise","currentUser","hasRefreshed","username","password","_this","deferred","defer","method","data","grant_type","headers","Content-Type","transformRequest","obj","str","p","encodeURIComponent","join","then","response","setToken","userName","access_token","refresh_token","resolve","catch","console","log","reject","promise","hasToken","deleteToken","Email","Password","ConfirmPassword","rolename","RoleName","params","retryHttpConfig","_this2","token","getToken","refreshToken","tokenUrl","post","logout","id","_this3","_possibleConstructorReturn","Object","getPrototypeOf","roles","apiModel","Id","UserName","authInterceptor","$injector","auth","request","config","authentication","Authorization","accessToken","responseError","rejection","status","authService","get","Token","AuthStateService","$cookies","authCookieName","user","stringifiedToken","JSON","stringify","put","jsonEncodedToken","parse","RestServiceBase","endpoint","apiUrl","viewModel","arguments","undefined","responseIsEnumerable","prototype","toString","enumerableData","convertedData","map","toViewModel","error","toApiModel","converted","delete","ApiModelBase","ViewModelBase","LoginModel","AccountController","accountService","registerModel","RegisterModel","loginModel","lastResponse","isLoggedIn","roleName","login","getRoles","addRole","_this4","removeRole","_this5","register","confirmPassword","_this6","AuthorizedController","usersService","users","text","adminFunction","_accountService","UsersService","fromApiModel","Text","DataAccessController","valuesService","values","value","filter","v","ValueViewModel","ValuesService","name","Name","Page","route","description","PageSelectorController","$state","selectedPage","pages","go","_routes","_httpConfig","_accountController","_AuthorizedController","_AuthorizedService","_dataAccessControllers","_dataAccessServices","_indexController","_indexServices","_pageSelectorController","_authStateService","_authInterceptor","angular","controller","service","PeopleController","PeopleService","factory","PeopleSortOption","display","property","reverse","peopleService","people","getPeople","defaultSortOption","sortOptions","sortBy","Person","age"],"mappings":"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","file":"combined.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","exports.frontendConfig = {\r\n    protocol: \"http\",\r\n    domain: \"localhost.com\",\r\n    port: 8000,\r\n    baseUrl: () => exports.frontendConfig.protocol + \"://\" + exports.frontendConfig.domain + \":\" + exports.frontendConfig.port\r\n};\r\n\r\nexports.backendConfig = {\r\n    protocol: \"http\",\r\n    domain: \"localhost\",\r\n    port: 12345,\r\n    baseUrl: () => exports.backendConfig.protocol + \"://\" + exports.backendConfig.domain + \":\" + exports.backendConfig.port\r\n};\r\n\r\n//this will be shared across node and ng, so module won't exist on ng\r\nif (typeof module !== \"undefined\") {\r\n    module.exports = {\r\n        frontendConfig: exports.frontendConfig,\r\n        backendConfig: exports.backendConfig\r\n    };\r\n}","export function httpConfig($httpProvider) {\r\n    //Enable cross domain calls\r\n    $httpProvider.defaults.useXDomain = true;\r\n    $httpProvider.interceptors.push('authInterceptor');\r\n}","export function routes($stateProvider, $urlRouterProvider, $locationProvider) {\r\n    $urlRouterProvider.otherwise(\"/PageSelector\");\r\n    $locationProvider.html5Mode();\r\n    $stateProvider\r\n        .state(\"root\", {\r\n            url: \"/\",\r\n            templateUrl: \"/root.html\"\r\n        })\r\n        .state(\"pageSelector\", {\r\n            url: \"/PageSelector\",\r\n            templateUrl: \"/PageSelector/PageSelector.html\"\r\n        })\r\n        .state(\"pageSelector.index\", {\r\n            url: \"/Index\",\r\n            templateUrl: \"/index/index.html\"\r\n        })\r\n        .state(\"pageSelector.dataAccess\", {\r\n            url: \"/DataAccess\",\r\n            templateUrl: \"/DataAccess/DataAccess.html\"\r\n        })\r\n        .state(\"pageSelector.account\", {\r\n            url: \"/Account\",\r\n            templateUrl: \"/Account/Account.html\"\r\n        })\r\n        .state(\"pageSelector.authorized\", {\r\n            url: \"/Authorized\",\r\n            templateUrl: \"/Authorized/Authorized.html\"\r\n        });\r\n}","import {backendConfig} from \"../../../serverConfig\";\r\nimport {ViewModelBase} from \"../shared/restService\";\r\n\r\nexport class AccountService {\r\n    constructor($http, $q, authStateService) {\r\n        this.$http = $http;\r\n        this.$q = $q;\r\n        this.authStateService = authStateService;\r\n        this.refreshPromise = null;\r\n        this.currentUser = null;\r\n        //prevents infinite recursion when receiving 401 due to lack of role/authorization, rather than lack of authentication\r\n        this.hasRefreshed = false;\r\n    }\r\n\r\n    login(username, password) {\r\n        var deferred = this.$q.defer();\r\n        var request = this.$http({\r\n            url: backendConfig.baseUrl() + \"/token\",\r\n            method: \"POST\",\r\n            data: {grant_type: 'password', username: username, password: password},\r\n            headers: {'Content-Type': 'application/x-www-form-urlencoded'},\r\n            transformRequest: function (obj) {\r\n                var str = [];\r\n                for (var p in obj)\r\n                    str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\r\n                return str.join(\"&\");\r\n            }\r\n        }).then(response => {\r\n            this.hasRefreshed = false;\r\n            this.authStateService.setToken(response.data.userName, response.data.access_token, response.data.refresh_token);\r\n            this.currentUser = new UserViewModel(-1, response.data.userName);\r\n            deferred.resolve();\r\n        }).catch(response => {\r\n            console.log(\"login error\");\r\n            console.log(response);\r\n            deferred.reject(response);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    logout() {\r\n        if (!this.authStateService.hasToken()) return;\r\n        this.authStateService.deleteToken();\r\n    }\r\n\r\n    isLoggedIn() {\r\n        return !!this.authStateService.hasToken();\r\n    }\r\n\r\n    register(username, password) {\r\n        var deferred = this.$q.defer();\r\n        var request = this.$http({\r\n            url: backendConfig.baseUrl() + \"/api/\" + \"account/register\",\r\n            method: \"POST\",\r\n            data: {Email: username, Password: password, ConfirmPassword: password}\r\n        }).then(response => {\r\n            deferred.resolve();\r\n        }).catch(response => {\r\n            console.log(\"register error\");\r\n            console.log(response);\r\n            deferred.reject(response);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    addRole(username, rolename) {\r\n        var deferred = this.$q.defer();\r\n        var request = this.$http({\r\n            url: backendConfig.baseUrl() + \"/api/\" + \"account/addRole\",\r\n            method: \"POST\",\r\n            data: {Email: username, RoleName: rolename}\r\n        }).then(response => {\r\n            deferred.resolve();\r\n        }).catch(response => {\r\n            console.log(\"add role error\");\r\n            console.log(response);\r\n            deferred.reject(response);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    removeRole(username, rolename) {\r\n        var deferred = this.$q.defer();\r\n        var request = this.$http({\r\n            url: backendConfig.baseUrl() + \"/api/\" + \"account/removeRole\",\r\n            method: \"POST\",\r\n            data: {Email: username, RoleName: rolename}\r\n        }).then(response => {\r\n            deferred.resolve();\r\n        }).catch(response => {\r\n            console.log(\"remove role error\");\r\n            console.log(response);\r\n            deferred.reject(response);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    getRoles(username) {\r\n        var deferred = this.$q.defer();\r\n        var request = this.$http({\r\n            url: backendConfig.baseUrl() + \"/api/\" + \"account/getRoles\",\r\n            method: \"GET\",\r\n            params: {Email: username}\r\n        }).then(response => {\r\n            deferred.resolve(response.data);\r\n        }).catch(response => {\r\n            console.log(\"get roles error\");\r\n            console.log(response);\r\n            deferred.reject(response);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    refreshToken(retryHttpConfig) {\r\n        if (this.refreshPromise === null) {\r\n            var token = this.authStateService.getToken();\r\n            if (!this.hasRefreshed && token && token.refreshToken) {\r\n                var data = \"grant_type=refresh_token&refresh_token=\" + token.refreshToken;\r\n                var tokenUrl = backendConfig.baseUrl() + '/token';\r\n                var headers = {headers: {'Content-Type': 'application/x-www-form-urlencoded'}};\r\n                this.refreshPromise = this.$http.post(tokenUrl, data, headers)\r\n                    .then(response => {\r\n                        this.hasRefreshed = true;\r\n                        this.authStateService.setToken(response.data.userName, response.data.access_token, response.data.refresh_token);\r\n                        this.refreshPromise = null;\r\n                        if (retryHttpConfig) return $http(retryHttpConfig);\r\n                    })\r\n                    .catch(response => {\r\n                        this.refreshPromise = null;\r\n                        this.logout();\r\n                    });\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class UserViewModel extends ViewModelBase {\r\n    constructor(id, userName) {\r\n        super(id);\r\n        this.userName = userName;\r\n        this.roles = [];\r\n    }\r\n\r\n    static fromApiModel(apiModel) {\r\n        return new UserViewModel(apiModel.Id, apiModel.UserName);\r\n    }\r\n}","export function authInterceptor($injector, $q, authStateService) {\r\n    var auth = {};\r\n\r\n    auth.request = function (config) {\r\n        config.headers = config.headers || {};\r\n        if (authStateService.hasToken()) {\r\n            var authentication = authStateService.getToken();\r\n            config.headers.Authorization = 'Bearer ' + authentication.accessToken;\r\n        }\r\n        else {\r\n            console.log(\"Failed to add authorisation to request\");\r\n            console.log(config);\r\n        }\r\n        return config\r\n    };\r\n\r\n    auth.responseError = function (rejection) {\r\n        var deferred = $q.defer();\r\n        if (rejection.status === 401) {\r\n            var authService = $injector.get('accountService');\r\n            authService.refreshToken(rejection.config);\r\n        } else {\r\n            deferred.reject(rejection);\r\n        }\r\n        return deferred.promise;\r\n    };\r\n    return auth;\r\n}","import {frontendConfig} from \"../../../serverConfig\";\r\n\r\nexport class AuthStateService {\r\n    constructor($cookies) {\r\n        this.$cookies = $cookies;\r\n        this.authCookieName = \"token\";\r\n    }\r\n\r\n    setToken(user, accessToken, refreshToken) {\r\n        var token = new Token(user, accessToken, refreshToken);\r\n        var stringifiedToken = JSON.stringify(token);\r\n        this.$cookies.put(this.authCookieName, stringifiedToken, { domain: frontendConfig.domain });\r\n    }\r\n\r\n    getToken() {\r\n        var jsonEncodedToken = this.$cookies.get(this.authCookieName);\r\n        if (!jsonEncodedToken) return null;\r\n        var token = JSON.parse(jsonEncodedToken);\r\n        return token;\r\n    }\r\n\r\n    hasToken() {\r\n        return !!this.getToken();\r\n    }\r\n\r\n    deleteToken() {\r\n        if (!this.hasToken()) return;\r\n        this.$cookies.put(this.authCookieName, null, { domain: frontendConfig.domain });\r\n    }\r\n}\r\n\r\nclass Token {\r\n    constructor(userName, accessToken, refreshToken) {\r\n        this.userName = userName;\r\n        this.accessToken = accessToken;\r\n        this.refreshToken = refreshToken;\r\n    }\r\n}","import {backendConfig} from \"../../../serverConfig\";\r\n\r\nexport class RestServiceBase {\r\n    constructor($http, $q, endpoint) {\r\n        this.$http = $http;\r\n        this.$q = $q;\r\n        this.apiUrl = backendConfig.baseUrl() + \"/api/\" + endpoint;\r\n    }\r\n\r\n    /**\r\n     * Converts the parameter api model to a {ViewModelBase}\r\n     * Must be overridden in derived classes\r\n     * @param {ApiModelBase} apiModel\r\n     */\r\n    toViewModel(apiModel) {\r\n        throw new Error(\"Abstract\");\r\n    };\r\n\r\n    /**\r\n     * Converts the parameter api model to a {ViewModelBase}\r\n     * Must be overridden in derived classes\r\n     * @param {ViewModelBase} viewModel\r\n     */\r\n    toApiModel(viewModel) {\r\n        throw new Error(\"Abstract\");\r\n    };\r\n\r\n    /**\r\n     * Issues a GET request to the API, optionally taking a numeric id for a specific item\r\n     * Returns an array of elements, containing all items if no id is passed or just the item with\r\n     * the matching id if an id is passed\r\n     * @param {number=} id\r\n     * @returns {(Promise.<Array.<ViewModelBase>>)}\r\n     */\r\n    get(id = null) {\r\n        var deferred = this.$q.defer();\r\n        var params = id ? {id: id} : {};\r\n        this.$http.get(this.apiUrl, {params: params})\r\n            .then((response) => {\r\n                var responseIsEnumerable = Object.prototype.toString.call(response.data) === \"[object Array]\";\r\n                var enumerableData = responseIsEnumerable ? response.data : [response.data];\r\n                var convertedData = enumerableData.map(this.toViewModel);\r\n                deferred.resolve(convertedData);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"data service error\");\r\n                console.log(error);\r\n                deferred.reject(error);\r\n            });\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Issues a POST request to the API for the parameter view model\r\n     * This should cause the server to add the parameter view model to its list of entities\r\n     * @param {ViewModelBase} viewModel\r\n     * @returns {(Promise.<ViewModelBase>)}\r\n     */\r\n    post(viewModel) {\r\n        var deferred = this.$q.defer();\r\n        var apiModel = this.toApiModel(viewModel);\r\n        this.$http.post(this.apiUrl, {data: apiModel})\r\n            .then((response) => {\r\n                var converted = this.toViewModel(response.data);\r\n                deferred.resolve(converted);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"data service error\");\r\n                console.log(error);\r\n                deferred.reject(error);\r\n            });\r\n        return deferred.promise;\r\n    }\r\n\r\n    /**\r\n     * Issues a PUT request to the API with the id of the parameter view model, passing the view model\r\n     * This should cause the server to update the value of the entity with a matching id to the values present\r\n     * in the parameter view model\r\n     * @param {ViewModelBase} viewModel\r\n     * @returns {(Promise.<ViewModelBase>)}\r\n     */\r\n    put(viewModel){\r\n        var deferred = this.$q.defer();\r\n        var apiModel = this.toApiModel(viewModel);\r\n        this.$http.put(this.apiUrl, {params: {id: apiModel.id}, data: apiModel})\r\n            .then((response) => {\r\n                var converted = this.toViewModel(response.data);\r\n                deferred.resolve(converted);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"data service error\");\r\n                console.log(error);\r\n                deferred.reject(error);\r\n            });\r\n        return deferred.promise;\r\n    }\r\n\r\n    //this is a keyword in js so perhaps best avoided, but given that Google's $http object is using it, I will too\r\n    /**\r\n     * Issues a DELETE request to the API with the id of the parameter view model\r\n     * This should cause the server to delete the entity with a matching id\r\n     * @param {ViewModelBase} viewModel\r\n     * @returns {Promise}\r\n     */\r\n    delete(viewModel){\r\n        var deferred = this.$q.defer();\r\n        var apiModel = this.toApiModel(viewModel);\r\n        this.$http.delete(this.apiUrl, {params: {id: apiModel.id}})\r\n            .then((response) => {\r\n                deferred.resolve();\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"data service error\");\r\n                console.log(error);\r\n                deferred.reject(error);\r\n            });\r\n        return deferred.promise;\r\n    }\r\n}\r\n\r\nexport class ApiModelBase {\r\n    constructor(id) {\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nexport class ViewModelBase {\r\n    constructor(id) {\r\n        this.id = id;\r\n    }\r\n}","export class AccountController {\r\n    constructor(accountService) {\r\n        this.accountService = accountService;\r\n        this.registerModel = new RegisterModel();\r\n        this.loginModel = new LoginModel();\r\n        this.lastResponse = null;\r\n        this.isLoggedIn = this.accountService.isLoggedIn();\r\n        this.currentUser = accountService.currentUser;\r\n        this.roleName = \"\";\r\n    }\r\n\r\n    login(loginModel) {\r\n        this.accountService.login(loginModel.userName, loginModel.password)\r\n            .then(response => {\r\n                this.lastResponse = \"login successful\";\r\n                this.isLoggedIn = this.accountService.isLoggedIn();\r\n                this.currentUser = this.accountService.currentUser;\r\n            })\r\n            .catch(response => {\r\n                this.lastResponse = response;\r\n            })\r\n    }\r\n\r\n    getRoles() {\r\n        if (!this.currentUser) return;\r\n        this.accountService.getRoles(this.currentUser.userName)\r\n            .then(roles => {\r\n                this.lastResponse = \"get roles successful\";\r\n                this.currentUser.roles = roles;\r\n            })\r\n            .catch(response => {\r\n                this.lastResponse = response;\r\n            });\r\n    }\r\n\r\n    addRole(roleName) {\r\n        if (!this.currentUser) return;\r\n        this.accountService.addRole(this.currentUser.userName, roleName)\r\n            .then(roles => {\r\n                this.lastResponse = \"add role successful\";\r\n            })\r\n            .catch(response => {\r\n                this.lastResponse = response;\r\n            });\r\n    }\r\n\r\n    removeRole(roleName) {\r\n        if (!this.currentUser) return;\r\n        this.accountService.removeRole(this.currentUser.userName, roleName)\r\n            .then(roles => {\r\n                this.lastResponse = \"remove role successful\";\r\n            })\r\n            .catch(response => {\r\n                this.lastResponse = response;\r\n            });\r\n    }\r\n\r\n    logout(){\r\n        this.accountService.logout();\r\n        this.isLoggedIn = this.accountService.isLoggedIn();\r\n    }\r\n\r\n    register(registerModel) {\r\n        this.accountService.register(registerModel.userName, registerModel.password, registerModel.confirmPassword)\r\n            .then(response => {\r\n                this.lastResponse = \"registration successful\";\r\n            })\r\n            .catch(response => {\r\n                this.lastResponse = response;\r\n            })\r\n    }\r\n}\r\n\r\nclass LoginModel {\r\n    constructor() {\r\n        this.userName = \"\";\r\n        this.password = \"\";\r\n    }\r\n}\r\n\r\nclass RegisterModel extends LoginModel {\r\n    constructor() {\r\n        super();\r\n        this.confirmPassword = \"\";\r\n    }\r\n}","export class AuthorizedController {\r\n    constructor(usersService) {\r\n        this.usersService = usersService;\r\n        this.users = [];\r\n        this.text = null;\r\n        this.lastResponse = null;\r\n    }\r\n\r\n    getUsers() {\r\n        this.usersService.get()\r\n            .then(users => {\r\n                this.users = users;\r\n                this.lastResponse = \"got users\";\r\n            })\r\n            .catch(response => {\r\n                this.lastResponse = response;\r\n            });\r\n    }\r\n\r\n    adminFunction(text) {\r\n        this.usersService.adminFunction(text)\r\n            .then(response => {\r\n                this.lastResponse = response;\r\n            })\r\n            .catch(response => {\r\n                this.lastResponse = response;\r\n            });\r\n    }\r\n}","import {RestServiceBase, ViewModelBase, ApiModelBase} from \"../../js/shared/restService\";\r\nimport {UserViewModel} from \"../../js/shared/accountService\";\r\n\r\nexport class UsersService extends RestServiceBase {\r\n    constructor($http, $q) {\r\n        super($http, $q, \"Users\");\r\n    }\r\n\r\n    toViewModel(apiModel) {\r\n        return UserViewModel.fromApiModel(apiModel);\r\n    };\r\n\r\n    toApiModel(viewModel) {\r\n        return viewModel\r\n    };\r\n\r\n    adminFunction(text) {\r\n        var deferred = this.$q.defer();\r\n        this.$http.post(this.apiUrl + \"/AdminFunction\", {Text: text})\r\n            .then((response) => {\r\n                deferred.resolve(response.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"data service error\");\r\n                console.log(error);\r\n                deferred.reject(error);\r\n            });\r\n        return deferred.promise;\r\n    }\r\n}\r\n\r\n","export class DataAccessController {\r\n    constructor(valuesService) {\r\n        this.valuesService = valuesService;\r\n        this.values = [];\r\n        this.error = null;\r\n        this.method = \"GET\";\r\n        this.id = null;\r\n        this.value = null;\r\n    }\r\n\r\n    init() {\r\n        //here is where you'd initialize the controller if initialization had to occur\r\n    }\r\n\r\n    get(id = null) {\r\n        this.valuesService.get(id)\r\n            .then(values => this.values = values)\r\n            .catch(error => this.error = error);\r\n    }\r\n\r\n    post(viewModel) {\r\n        this.valuesService.post(viewModel)\r\n            .then(value => this.values.push(value))\r\n            .catch(error => this.error = error);\r\n    }\r\n\r\n    put(viewModel) {\r\n        this.valuesService.put(viewModel)\r\n            .catch(error => this.error = error);\r\n    }\r\n\r\n    delete(viewModel) {\r\n        this.valuesService.post(viewModel)\r\n            .then(value => this.values = this.values.filter(v => v.id !== viewModel.id))\r\n            .catch(error => this.error = error);\r\n    }\r\n}","import {RestServiceBase, ViewModelBase, ApiModelBase} from \"../../js/shared/restService\";\r\n\r\nexport class ValuesService extends RestServiceBase {\r\n    constructor($http, $q) {\r\n        super($http, $q, \"Values\");\r\n    }\r\n\r\n    toViewModel(apiModel) {\r\n        return ValueViewModel.fromApiModel(apiModel);\r\n    };\r\n\r\n    toApiModel(viewModel) {\r\n        return viewModel\r\n    };\r\n}\r\n\r\nclass ValueViewModel extends ViewModelBase {\r\n    constructor(id, name){\r\n        super(id);\r\n        this.name = name;\r\n    }\r\n\r\n    static fromApiModel(apiModel) {\r\n        return new ValueViewModel(apiModel.Id, apiModel.Name);\r\n    }\r\n}","class Page{\r\n    constructor(name, route, description){\r\n        this.name = name;\r\n        this.route = route;\r\n        this.description = description;\r\n    }\r\n}\r\n\r\nexport class PageSelectorController {\r\n    constructor($state) {\r\n        this.$state = $state;\r\n        this.selectedPage = null;\r\n        this.pages = [\r\n            new Page(\"Index\", \"pageSelector.index\", \"Shows the usage of ng-options and filtering\"),\r\n            new Page(\"Data Access\", \"pageSelector.dataAccess\", \"Shows the usage of a base REST service with babel\"),\r\n            new Page(\"Account\", \"pageSelector.account\", \"Logs into or registers user accounts\"),\r\n            new Page(\"Authorized\", \"pageSelector.authorized\", \"Performs a sample action which requires authorization and authentication\")\r\n        ];\r\n    }\r\n\r\n    go(selectedPage) {\r\n        this.$state.go(selectedPage.route);\r\n    }\r\n}","import {routes} from \"../js/config/routes\";\r\nimport {httpConfig} from \"../js/config/httpConfig\";\r\nimport {AccountController} from \"./Account/accountController\";\r\nimport {AuthorizedController} from \"./Authorized/AuthorizedController\";\r\nimport {UsersService} from \"./Authorized/AuthorizedService\";\r\nimport {DataAccessController} from \"./DataAccess/dataAccessControllers\";\r\nimport {ValuesService} from \"./DataAccess/dataAccessServices\";\r\nimport {PeopleController} from \"./index/indexController\";\r\nimport {PeopleService} from \"./index/indexServices\";\r\nimport {PageSelectorController} from \"./PageSelector/pageSelectorController\";\r\nimport {AuthStateService} from \"../js/shared/authStateService\";\r\nimport {authInterceptor} from \"../js/shared/authInterceptor\";\r\nimport {AccountService} from \"../js/shared/accountService\";\r\n\r\nangular.module(\"playground\",\r\n    [\r\n        \"ui.router\",\r\n        \"ngCookies\"\r\n    ])\r\n    //config\r\n    .config([\"$stateProvider\", \"$urlRouterProvider\", \"$locationProvider\", routes])\r\n    .config(httpConfig)\r\n    //account\r\n    .controller(\"accountController\", [\"accountService\", AccountController])\r\n    //authorized\r\n    .controller(\"authorizedController\", [\"usersService\", AuthorizedController])\r\n    .service(\"usersService\", [\"$http\", \"$q\", UsersService])\r\n    //data access\r\n    .controller(\"dataAccessController\", [\"ValuesService\", DataAccessController])\r\n    .service(\"ValuesService\", [\"$http\", \"$q\", ValuesService])\r\n    //index\r\n    .controller(\"peopleController\", [\"peopleService\", PeopleController])\r\n    .service(\"peopleService\", [PeopleService])\r\n    //page selector\r\n    .controller(\"pageSelectorController\", [\"$state\", \"accountService\", PageSelectorController])\r\n    //shared\r\n    .service(\"authStateService\", [\"$cookies\", AuthStateService])\r\n    .factory(\"authInterceptor\", [\"$injector\", \"$q\", \"authStateService\", authInterceptor])\r\n    .service(\"accountService\", [\"$http\", \"$q\", \"authStateService\", AccountService]);","class PeopleSortOption {\r\n    constructor(display, property, reverse) {\r\n        this.display = display;\r\n        this.property = property;\r\n        this.reverse = reverse;\r\n    }\r\n}\r\n\r\nexport class PeopleController {\r\n    constructor(peopleService) {\r\n        this.peopleService = peopleService;\r\n        this.people = this.peopleService.getPeople();\r\n        var defaultSortOption = new PeopleSortOption(\"alphabetical\", \"name\", false);\r\n        this.sortOptions = [defaultSortOption, new PeopleSortOption(\"oldest\", \"age\", true)];\r\n        this.sortBy = defaultSortOption;\r\n    }\r\n}","class Person {\r\n    constructor(name, age) {\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\nexport class PeopleService {\r\n    constructor() {\r\n        this.people = [new Person(\"Micky\", 26), new Person(\"Paula\", 57), new Person (\"Jimmy\", 23)];\r\n    }\r\n\r\n    getPeople() {\r\n        return this.people;\r\n    }\r\n\r\n    setPeople(people) {\r\n        this.people = people;\r\n    }\r\n}"],"sourceRoot":"/source/"}